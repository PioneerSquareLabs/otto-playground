
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  teamMembers TeamMember[]
  documents   Document[]
  tasks       Task[]
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
}

model Document {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  status      String
  storyPoints Int
  parentTask  Task?    @relation("TaskToSubtask", fields: [parentTaskId], references: [id])
  parentTaskId Int?    @map("parent_task_id")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  subtasks    Task[]   @relation("TaskToSubtask")
}