
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              Int      @id @default(autoincrement())
    githubId        Int      @unique
    githubUsername  String   @unique
    email           String   @unique
    emailVerified   DateTime?
    image           String?
    avatarUrl       String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @default(now())
    accounts        Account[]
    sessions        Session[]
    projects        Project[]
}

model Project {
  id           Int                        @id @default(autoincrement())
  name         String
  description  String?
  userId       Int
  repositoryUrl String?
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @default(now())
  user         User                       @relation(fields: [userId], references: [id])
  architecture ProjectArchitectureOption?
  sitemapNodes SitemapNode[]
  dataTables   DataTable[]
  tasks        Task[]
}

model ProjectArchitectureOption {
  id           Int      @id @default(autoincrement())
  language     String?
  framework    String?
  database     String?
  hosting      String?
  authentication String?
  cssStyling   String?
  projectId    Int      @unique
  project      Project  @relation(fields: [projectId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model SitemapNode {
  id             Int          @id @default(autoincrement())
  fileName       String
  fileDescription String?
  parentId       Int?
  projectId      Int
  approved       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  parent         SitemapNode? @relation("SitemapNodeToSitemapNode", fields: [parentId], references: [id])
  project        Project      @relation(fields: [projectId], references: [id])
  children       SitemapNode[] @relation("SitemapNodeToSitemapNode")
}

model DataTable {
  id         Int          @id @default(autoincrement())
  tableName  String
  projectId  Int
  approved   Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  project    Project      @relation(fields: [projectId], references: [id])
  dataColumns DataColumn[]
}

model DataColumn {
  id           Int        @id @default(autoincrement())
  columnName   String
  dataType     String
  isNullable   Boolean    @default(true)
  isUnique     Boolean    @default(false)
  isPrimaryKey Boolean    @default(false)
  tableId      Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  dataTable    DataTable  @relation(fields: [tableId], references: [id])
}

model Task {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  githubIssueId Int?
  projectId     Int
  approved      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  project       Project  @relation(fields: [projectId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}