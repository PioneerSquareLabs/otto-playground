// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    githubId      Int       @unique
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now())
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
    slackConnections SlackConnection[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  architectureOptions ProjectArchitectureOption[]
  sitemapNodes SitemapNode[]
  dataTables  DataTable[]
  tasks       Task[]
}

model ProjectArchitectureOption {
  id          String   @id @default(cuid())
  language    String
  framework   String
  database    String
  hosting     String
  authentication String
  cssStyling  String
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id])
}

model SlackConnection {
  id          String   @id @default(cuid())
  slackUserId String
  slackTeamId String
  accessToken String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model SitemapNode {
  id          String   @id @default(cuid())
  fileName    String
  description String?
  figmaLink   String?
  approved    Boolean  @default(false)
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id])
}

model DataTable {
  id          String   @id @default(cuid())
  tableName   String
  approved    Boolean  @default(false)
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id])
  dataColumns DataColumn[]
}

model DataColumn {
  id          String   @id @default(cuid())
  columnName  String
  dataType    String
  description String?
  dataTableId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  dataTable   DataTable @relation(fields: [dataTableId], references: [id])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  githubIssueNumber Int?
  approved    Boolean  @default(false)
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}