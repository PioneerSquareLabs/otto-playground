// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("id")
    name          String?   @map("name")
    email         String?   @unique @map("email")
    emailVerified DateTime? @map("email_verified")
    image         String?   @map("image")
    githubId      Int       @unique @map("github_id")
    avatarUrl     String?   @map("avatar_url")
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @default(now()) @map("updated_at")
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model Project {
    id                String   @id @default(cuid()) @map("id")
    userId            String   @map("user_id")
    name              String   @map("name")
    description       String?  @map("description")
    language          String   @map("language")
    framework         String   @map("framework")
    database          String   @map("database")
    hosting           String   @map("hosting")
    authentication    String   @map("authentication")
    cssStyling        String   @map("css_styling")
    slackIntegration  Boolean  @default(false) @map("slack_integration")
    createdAt         DateTime @default(now()) @map("created_at")
    updatedAt         DateTime @default(now()) @map("updated_at")
    user              User     @relation(fields: [userId], references: [id])
    sitemaps          Sitemap[]
    dataSchemas       DataSchema[]
    tasks             Task[]
}

model Sitemap {
    id              String   @id @default(cuid()) @map("id")
    projectId       String   @map("project_id")
    fileName        String   @map("file_name")
    fileDescription String?  @map("file_description")
    figmaLink       String?  @map("figma_link")
    approved        Boolean  @default(false) @map("approved")
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @default(now()) @map("updated_at")
    project         Project  @relation(fields: [projectId], references: [id])
}

model DataSchema {
    id        String   @id @default(cuid()) @map("id")
    projectId String   @map("project_id")
    tableName String   @map("table_name")
    approved  Boolean  @default(false) @map("approved")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @map("updated_at")
    project   Project  @relation(fields: [projectId], references: [id])
    columns   Column[]
}

model Column {
    id              String     @id @default(cuid()) @map("id")
    dataSchemaId    String     @map("data_schema_id")
    columnName      String     @map("column_name")
    columnType      String     @map("column_type")
    columnDescription String?  @map("column_description")
    createdAt       DateTime   @default(now()) @map("created_at")
    updatedAt       DateTime   @default(now()) @map("updated_at")
    dataSchema      DataSchema @relation(fields: [dataSchemaId], references: [id])
}

model Task {
    id              String   @id @default(cuid()) @map("id")
    projectId       String   @map("project_id")
    githubIssueId   Int?     @unique @map("github_issue_id")
    fileName        String   @map("file_name")
    fileDescription String?  @map("file_description")
    approved        Boolean  @default(false) @map("approved")
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @default(now()) @map("updated_at")
    project         Project  @relation(fields: [projectId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}