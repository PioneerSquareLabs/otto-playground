
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid()) @map("id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("id")
    userId            String  @map("user_id")
    type              String  @map("type")
    provider          String  @map("provider")
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @map("refresh_token") // @db.Text
    access_token      String? @map("access_token") // @db.Text
    expires_at        Int?    @map("expires_at")
    token_type        String? @map("token_type")
    scope             String? @map("scope")
    id_token          String? @map("id_token") // @db.Text
    session_state     String? @map("session_state")
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("id")
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime @map("expires")
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("id")
    name          String?   @map("name")
    email         String?   @unique @map("email")
    emailVerified DateTime? @map("email_verified")
    image         String?   @map("image")
    githubId      Int?      @unique @map("github_id")
    imageUrl      String?   @map("image_url")
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @default(now()) @map("updated_at")
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model VerificationToken {
    identifier String  @map("identifier")
    token      String  @unique @map("token")
    expires    DateTime @map("expires")

    @@unique([identifier, token])
}

model Project {
  id              String             @id @default(cuid()) @map("id")
  name            String             @map("name")
  description     String             @map("description")
  userId          String             @map("user_id")
  githubRepoUrl   String?            @map("github_repo_url")
  slackChannelId  String?            @map("slack_channel_id")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @default(now()) @map("updated_at")
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectSitemaps ProjectSitemap[]
  projectDataSchemas ProjectDataSchema[]
  projectTasks    ProjectTask[]
}

model ProjectSitemap {
  id             String    @id @default(cuid()) @map("id")
  projectId      String    @map("project_id")
  fileName       String    @map("file_name")
  fileDescription String?    @map("file_description")
  figmaUrl       String?   @map("figma_url")
  approved       Boolean   @default(false) @map("approved")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectDataSchema {
  id             String            @id @default(cuid()) @map("id")
  projectId      String            @map("project_id")
  tableName      String            @map("table_name")
  approved       Boolean           @default(false) @map("approved")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @default(now()) @map("updated_at")
  project        Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectDataColumns ProjectDataColumn[]
}

model ProjectDataColumn {
  id             String            @id @default(cuid()) @map("id")
  dataSchemaId   String            @map("data_schema_id")
  columnName     String            @map("column_name")
  columnType     String            @map("column_type")
  columnDescription String?        @map("column_description")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @default(now()) @map("updated_at")
  dataSchema     ProjectDataSchema @relation(fields: [dataSchemaId], references: [id], onDelete: Cascade)
}

model ProjectTask {
  id             String    @id @default(cuid()) @map("id")
  projectId      String    @map("project_id")
  taskName       String    @map("task_name")
  taskDescription String    @map("task_description")
  githubIssueId  Int?      @map("github_issue_id")
  approved       Boolean   @default(false) @map("approved")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}