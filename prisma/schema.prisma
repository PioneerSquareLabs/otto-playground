
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    github_id     Int       @unique
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    image_url     String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
  id           Int                  @id @default(autoincrement())
  name         String
  description  String?
  userId       String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @default(now())
  user         User                 @relation(fields: [userId], references: [id])
  configurations ProjectConfiguration[]
  sitemaps     Sitemap[]
  tasks        Task[]
  dataSchemas  DataSchema[]
}

model ProjectConfiguration {
  id           Int      @id @default(autoincrement())
  language     String
  framework    String
  database     String
  hosting      String
  authentication String
  css_styling  String   @map("css_styling")
  projectId    Int      @map("project_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  project      Project  @relation(fields: [projectId], references: [id])
}

model Sitemap {
  id         Int      @id @default(autoincrement())
  fileName   String   @map("file_name")
  description String?
  figma_link String?
  status     String
  projectId  Int      @map("project_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  project    Project  @relation(fields: [projectId], references: [id])
}

model DataSchema {
  id         Int      @id @default(autoincrement())
  tableName  String   @map("table_name")
  status     String
  projectId  Int      @map("project_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  project    Project  @relation(fields: [projectId], references: [id])
  columns    Column[]
}

model Column {
  id           Int        @id @default(autoincrement())
  columnName   String     @map("column_name")
  dataType     String     @map("data_type")
  description  String?
  dataSchemaId Int        @map("data_schema_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @map("updated_at")
  dataSchema   DataSchema @relation(fields: [dataSchemaId], references: [id])
}

model Task {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  status         String
  github_issue_id Int?
  projectId      Int      @map("project_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  project        Project  @relation(fields: [projectId], references: [id])
}