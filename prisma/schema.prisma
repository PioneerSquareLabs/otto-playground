
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    githubId      Int       @unique
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    imageUrl      String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now())
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
  id             String       @id @default(cuid())
  userId         String
  name           String
  description    String?
  language       String       @default("TypeScript")
  framework      String       @default("Next.js")
  cssStyling     String       @default("Tailwind CSS")
  database       String       @default("Supabase")
  hosting        String       @default("Vercel")
  authentication String       @default("NextAuth")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  sitemaps       Sitemap[]
  dataSchemas    DataSchema[]
  tasks          Task[]
}

model Sitemap {
  id          String    @id @default(cuid())
  projectId   String
  fileName    String
  description String?
  figmaLink   String?
  approved    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  project     Project   @relation(fields: [projectId], references: [id])
}

model DataSchema {
  id          String      @id @default(cuid())
  projectId   String
  tableName   String
  approved    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  project     Project     @relation(fields: [projectId], references: [id])
  dataColumns DataColumn[]
}

model DataColumn {
  id           String     @id @default(cuid())
  dataSchemaId String
  columnName   String
  dataType     String
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  dataSchema   DataSchema @relation(fields: [dataSchemaId], references: [id])
}

model Task {
  id             String    @id @default(cuid())
  projectId      String
  title          String
  description    String?
  githubIssueId  Int?
  approved       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  project        Project   @relation(fields: [projectId], references: [id])
}