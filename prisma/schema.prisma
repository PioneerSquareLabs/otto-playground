
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("id")
    githubId      Int       @unique @map("github_id")
    name          String    @map("name")
    email         String?   @unique @map("email")
    emailVerified DateTime?
    image         String?   @map("image")
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @default(now()) @map("updated_at")
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model Project {
    id             String        @id @default(cuid()) @map("id")
    userId         String        @map("user_id")
    name           String        @map("name")
    description    String?       @map("description")
    language       String        @default("TypeScript") @map("language")
    framework      String        @default("Next.js") @map("framework")
    database       String        @default("Supabase") @map("database")
    hosting        String        @default("Vercel") @map("hosting")
    authentication String        @default("NextAuth") @map("authentication")
    cssStyling     String        @default("Tailwind CSS") @map("css_styling")
    createdAt      DateTime      @default(now()) @map("created_at")
    updatedAt      DateTime      @default(now()) @map("updated_at")
    user           User          @relation(fields: [userId], references: [id])
    projectFiles   ProjectFile[]
    projectTables  ProjectTable[]
    projectTasks   ProjectTask[]
}

model ProjectFile {
    id          String    @id @default(cuid()) @map("id")
    projectId   String    @map("project_id")
    name        String    @map("name")
    description String?   @map("description")
    figmaLink   String?   @map("figma_link")
    approved    Boolean   @default(false) @map("approved")
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @default(now()) @map("updated_at")
    project     Project   @relation(fields: [projectId], references: [id])
}

model ProjectTable {
    id          String        @id @default(cuid()) @map("id")
    projectId   String        @map("project_id")
    name        String        @map("name")
    description String?       @map("description")
    approved    Boolean       @default(false) @map("approved")
    createdAt   DateTime      @default(now()) @map("created_at")
    updatedAt   DateTime      @default(now()) @map("updated_at")
    project     Project       @relation(fields: [projectId], references: [id])
    columns     ProjectColumn[]
}

model ProjectColumn {
    id             String      @id @default(cuid()) @map("id")
    projectTableId String      @map("project_table_id")
    name           String      @map("name")
    dataType       String      @map("data_type")
    description    String?     @map("description")
    approved       Boolean     @default(false) @map("approved")
    createdAt      DateTime    @default(now()) @map("created_at")
    updatedAt      DateTime    @default(now()) @map("updated_at")
    projectTable   ProjectTable @relation(fields: [projectTableId], references: [id])
}

model ProjectTask {
    id             String    @id @default(cuid()) @map("id")
    projectId      String    @map("project_id")
    title          String    @map("title")
    description    String?   @map("description")
    githubIssueId  Int?      @map("github_issue_id")
    approved       Boolean   @default(false) @map("approved")
    createdAt      DateTime  @default(now()) @map("created_at")
    updatedAt      DateTime  @default(now()) @map("updated_at")
    project        Project   @relation(fields: [projectId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}