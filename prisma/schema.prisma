
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    githubId      Int       @unique
    avatarUrl     String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now())
    projects      Project[]
    slackIntegration SlackIntegration?
}

model Project {
    id          Int                @id @default(autoincrement())
    name        String
    description String?
    user        User               @relation(fields: [userId], references: [id])
    userId      String
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @default(now())
    architecture ProjectArchitecture?
    sitemapNodes SitemapNode[]
    dataTables  DataTable[]
    tasks       Task[]
}

model ProjectArchitecture {
    id                   Int    @id @default(autoincrement())
    language             String
    framework            String
    databaseSystem       String
    hosting              String
    authenticationFramework String
    cssStyling           String
    project              Project @relation(fields: [projectId], references: [id])
    projectId            Int    @unique
    createdAt            DateTime @default(now())
    updatedAt            DateTime @default(now())
}

model SlackIntegration {
    id          Int      @id @default(autoincrement())
    slackUserId String
    slackTeamId String
    accessToken String
    user        User     @relation(fields: [userId], references: [id])
    userId      String   @unique
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
}

model SitemapNode {
    id          Int          @id @default(autoincrement())
    name        String
    description String?
    figmaLink   String?
    project     Project      @relation(fields: [projectId], references: [id])
    projectId   Int
    parentNode  SitemapNode? @relation("SitemapNodeToSitemapNode", fields: [parentNodeId], references: [id])
    parentNodeId Int?
    approved    Boolean      @default(false)
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @default(now())
    children    SitemapNode[] @relation("SitemapNodeToSitemapNode")
}

model DataTable {
    id        Int         @id @default(autoincrement())
    name      String
    project   Project     @relation(fields: [projectId], references: [id])
    projectId Int
    approved  Boolean     @default(false)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @default(now())
    columns   DataColumn[]
}

model DataColumn {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    dataType    String
    table       DataTable @relation(fields: [tableId], references: [id])
    tableId     Int
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @default(now())
}

model Task {
    id            Int      @id @default(autoincrement())
    title         String
    description   String?
    githubIssueId Int?
    project       Project  @relation(fields: [projectId], references: [id])
    projectId     Int
    approved      Boolean  @default(false)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}