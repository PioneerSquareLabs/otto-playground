// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    githubId      Int       @unique
    name          String
    email         String?   @unique
    emailVerified DateTime?
    imageUrl      String?
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
    slackConnections SlackConnection[]
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  settings    ProjectSetting[]
  sitemaps    Sitemap[]
  dataSchemas DataSchema[]
  tasks       Task[]
}

model ProjectSetting {
  id            Int       @id @default(autoincrement())
  language      String
  framework     String
  database      String
  hosting       String
  authentication String
  cssStyling    String
  project       Project   @relation(fields: [projectId], references: [id])
  projectId     Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}

model SlackConnection {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  slackUserId String
  slackTeamId String
  accessToken String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Sitemap {
  id              Int       @id @default(autoincrement())
  project         Project   @relation(fields: [projectId], references: [id])
  projectId       Int
  fileName        String
  fileDescription String?
  approved        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
}

model DataSchema {
  id        Int         @id @default(autoincrement())
  project   Project     @relation(fields: [projectId], references: [id])
  projectId Int
  tableName String
  approved  Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  columns   DataColumn[]
}

model DataColumn {
  id              Int       @id @default(autoincrement())
  dataSchema      DataSchema @relation(fields: [dataSchemaId], references: [id])
  dataSchemaId    Int
  columnName      String
  columnType      String
  columnDescription String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
}

model Task {
  id            Int       @id @default(autoincrement())
  project       Project   @relation(fields: [projectId], references: [id])
  projectId     Int
  title         String
  description   String?
  githubIssueId Int?
  approved      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}