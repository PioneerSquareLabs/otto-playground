_
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int           @id @default(autoincrement())
  email     String        @unique
  password  String
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @map("updated_at")
  projects  Project[]      @relation("owner")
  teamMembers TeamMember[] @relation("teamMembers")
  tasks     Task[]         @relation("assignee")
  notifications Notification[]
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  ownerId     Int           @map("owner_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @map("updated_at")
  owner       User          @relation("owner", fields: [ownerId], references: [id])
  teamMembers TeamMember[]  @relation("teamMembers")
  documents   Document[]
  tasks       Task[]
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  projectId Int      @map("project_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User     @relation("teamMembers", fields: [userId], references: [id])
  project   Project  @relation("teamMembers", fields: [projectId], references: [id])
}

model Document {
  id        Int      @id @default(autoincrement())
  projectId Int      @map("project_id")
  title     String
  content   String
  status    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  project   Project  @relation(fields: [projectId], references: [id])
}

model Task {
  id          Int           @id @default(autoincrement())
  projectId   Int           @map("project_id")
  title       String
  description String
  status      String
  assigneeId  Int?          @map("assignee_id")
  parentTaskId Int?         @map("parent_task_id")
  storyPoints Int?          @map("story_points")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @map("updated_at")
  project     Project       @relation(fields: [projectId], references: [id])
  assignee    User?         @relation("assignee", fields: [assigneeId], references: [id])
  parentTask  Task?         @relation("Subtasks", fields: [parentTaskId], references: [id])
  subtasks    Task[]        @relation("Subtasks")
  githubIssues GithubIssue[] @relation("task")
  pullRequests PullRequest[] @relation("task")
}

model GithubIssue {
  id        Int    @id @default(autoincrement())
  taskId    Int    @map("task_id")
  issueNumber Int  @map("issue_number")
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  task      Task    @relation("task", fields: [taskId], references: [id])
}

model PullRequest {
  id        Int    @id @default(autoincrement())
  taskId    Int    @map("task_id")
  prNumber  Int    @map("pr_number")
  url       String
  status    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  task      Task    @relation("task", fields: [taskId], references: [id])
}

model Notification {
  id        Int    @id @default(autoincrement())
  userId    Int    @map("user_id")
  message   String
  read      Boolean @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User    @relation(fields: [userId], references: [id])
}