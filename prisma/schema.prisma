// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    githubId      Int       @unique
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
  id             String         @id @default(cuid())
  userId         String
  name           String
  description    String?
  language       String
  framework      String
  database       String
  hosting        String
  authFramework  String
  cssStyling     String
  slackAuthToken String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  user           User           @relation(fields: [userId], references: [id])
  projectFiles   ProjectFile[]
  projectTables  ProjectTable[]
  projectTasks   ProjectTask[]
}

model ProjectFile {
  id              String    @id @default(cuid())
  projectId       String
  fileName        String
  fileDescription String?
  figmaLink       String?
  approved        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  project         Project   @relation(fields: [projectId], references: [id])
}

model ProjectTable {
  id         String         @id @default(cuid())
  projectId  String
  tableName  String
  approved   Boolean        @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now())
  project    Project        @relation(fields: [projectId], references: [id])
  columns    ProjectColumn[]
}

model ProjectColumn {
  id               String       @id @default(cuid())
  projectTableId   String
  columnName       String
  columnDescription String?
  dataType         String
  isNullable       Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now())
  projectTable     ProjectTable @relation(fields: [projectTableId], references: [id])
}

model ProjectTask {
  id              String    @id @default(cuid())
  projectId       String
  taskDescription String
  githubIssueId   Int?
  approved        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  project         Project   @relation(fields: [projectId], references: [id])
}