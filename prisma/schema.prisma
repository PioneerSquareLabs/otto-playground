// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    github_id     Int       @unique
    username      String    @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    avatar_url    String?
    created_at    DateTime  @default(now())
    updated_at    DateTime  @default(now())
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
    slack         SlackIntegration[]
}

model Project {
    id          Int                 @id @default(autoincrement())
    name        String
    description String?
    user_id     String
    user        User                @relation(fields: [user_id], references: [id])
    created_at  DateTime            @default(now())
    updated_at  DateTime            @default(now())
    architecture ProjectArchitecture[]
    sitemaps    ProjectSitemap[]
    data_schema ProjectDataSchema[]
    tasks       ProjectTask[]
}

model ProjectArchitecture {
    id             Int      @id @default(autoincrement())
    language       String
    framework      String
    database       String
    hosting        String
    authentication String
    css_styling    String
    project_id     Int
    project        Project  @relation(fields: [project_id], references: [id])
    created_at     DateTime @default(now())
    updated_at     DateTime @default(now())
}

model ProjectSitemap {
    id              Int      @id @default(autoincrement())
    file_name       String
    file_description String?
    figma_link      String?
    status          String   @default("pending")
    project_id      Int
    project         Project  @relation(fields: [project_id], references: [id])
    created_at      DateTime @default(now())
    updated_at      DateTime @default(now())
}

model ProjectDataSchema {
    id               Int      @id @default(autoincrement())
    table_name       String
    column_name      String
    column_description String?
    status           String   @default("pending")
    project_id       Int
    project          Project  @relation(fields: [project_id], references: [id])
    created_at       DateTime @default(now())
    updated_at       DateTime @default(now())
}

model ProjectTask {
    id             Int      @id @default(autoincrement())
    task_name      String
    task_description String?
    github_issue_id Int?
    status         String   @default("pending")
    project_id     Int
    project        Project  @relation(fields: [project_id], references: [id])
    created_at     DateTime @default(now())
    updated_at     DateTime @default(now())
}

model SlackIntegration {
    id           Int      @id @default(autoincrement())
    slack_user_id String  @unique
    slack_team_id String
    access_token String
    user_id      String
    user         User     @relation(fields: [user_id], references: [id])
    created_at   DateTime @default(now())
    updated_at   DateTime @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
