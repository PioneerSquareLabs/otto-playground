// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    githubId      Int       @unique
    imageUrl      String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now())
    projects      Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
  id            Int          @id @default(autoincrement())
  name          String
  description   String?
  language      String       @default("TypeScript")
  framework     String       @default("Next.js")
  library       String       @default("React")
  database      String       @default("Supabase")
  hosting       String       @default("Vercel")
  authFramework String       @default("NextAuth")
  cssFramework  String       @default("Tailwind CSS")
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  sitemaps      Sitemap[]
  dataSchemas   DataSchema[]
  tasks         Task[]
}

model Sitemap {
  id             Int      @id @default(autoincrement())
  projectId      Int
  project        Project  @relation(fields: [projectId], references: [id])
  fileName       String
  fileDescription String?
  approved       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model DataSchema {
  id        Int      @id @default(autoincrement())
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  tableName String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  columns   Column[]
}

model Column {
  id              Int        @id @default(autoincrement())
  dataSchemaId    Int
  dataSchema      DataSchema @relation(fields: [dataSchemaId], references: [id])
  columnName      String
  columnType      String
  columnDescription String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
}

model Task {
  id             Int      @id @default(autoincrement())
  projectId      Int
  project        Project  @relation(fields: [projectId], references: [id])
  taskName       String
  taskDescription String?
  githubIssueId  Int?
  approved       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}