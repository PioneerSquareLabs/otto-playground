// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    githubId      Int       @unique
    name          String
    email         String?   @unique
    emailVerified DateTime?
    imageUrl      String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now())
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model Project {
  id          Int                @id @default(autoincrement())
  name        String
  description String?
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now())
  settings    ProjectSetting[]
  sitemaps    ProjectSitemap[]
  schemas     ProjectDataSchema[]
  tasks       ProjectTask[]
}

model ProjectSetting {
  id                   Int      @id @default(autoincrement())
  language             String
  framework            String
  databaseSystem       String
  hosting              String
  authenticationFramework String
  cssStyling           String
  project              Project  @relation(fields: [projectId], references: [id])
  projectId            Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())
}

model ProjectSitemap {
  id          Int      @id @default(autoincrement())
  fileName    String
  description String?
  figmaUrl    String?
  approved    Boolean  @default(false)
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model ProjectDataSchema {
  id          Int                @id @default(autoincrement())
  tableName   String
  description String?
  approved    Boolean            @default(false)
  project     Project            @relation(fields: [projectId], references: [id])
  projectId   Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now())
  columns     ProjectDataColumn[]
}

model ProjectDataColumn {
  id          Int              @id @default(autoincrement())
  columnName  String
  dataType    String
  description String?
  schema      ProjectDataSchema @relation(fields: [dataSchemaId], references: [id])
  dataSchemaId Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())
}

model ProjectTask {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  githubIssueId  Int?
  approved       Boolean  @default(false)
  project        Project  @relation(fields: [projectId], references: [id])
  projectId      Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}