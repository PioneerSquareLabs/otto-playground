
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("id")
    githubId      Int       @unique @map("github_id")
    name          String    @map("name")
    email         String?   @unique @map("email")
    emailVerified DateTime?
    image         String?   @map("image")
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @default(now()) @map("updated_at")
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model Project {
    id          String          @id @default(cuid()) @map("id")
    name        String          @map("name")
    description String?         @map("description")
    userId      String          @map("user_id")
    createdAt   DateTime        @default(now()) @map("created_at")
    updatedAt   DateTime        @default(now()) @map("updated_at")
    user        User            @relation(fields: [userId], references: [id])
    sitemaps    ProjectSitemap[]
    dataSchemas ProjectDataSchema[]
    tasks       ProjectTask[]
}

model ProjectSitemap {
    id             String   @id @default(cuid()) @map("id")
    projectId      String   @map("project_id")
    fileName       String   @map("file_name")
    fileDescription String?  @map("file_description")
    figmaLink      String?  @map("figma_link")
    createdAt      DateTime @default(now()) @map("created_at")
    updatedAt      DateTime @default(now()) @map("updated_at")
    project        Project  @relation(fields: [projectId], references: [id])
}

model ProjectDataSchema {
    id        String            @id @default(cuid()) @map("id")
    projectId String            @map("project_id")
    tableName String            @map("table_name")
    createdAt DateTime          @default(now()) @map("created_at")
    updatedAt DateTime          @default(now()) @map("updated_at")
    project  Project            @relation(fields: [projectId], references: [id])
    columns  ProjectDataColumn[]
}

model ProjectDataColumn {
    id              String           @id @default(cuid()) @map("id")
    dataSchemaId    String           @map("data_schema_id")
    columnName      String           @map("column_name")
    columnType      String           @map("column_type")
    columnDescription String?        @map("column_description")
    createdAt       DateTime         @default(now()) @map("created_at")
    updatedAt       DateTime         @default(now()) @map("updated_at")
    dataSchema      ProjectDataSchema @relation(fields: [dataSchemaId], references: [id])
}

model ProjectTask {
    id            String   @id @default(cuid()) @map("id")
    projectId      String   @map("project_id")
    taskName       String   @map("task_name")
    taskDescription String?  @map("task_description")
    githubIssueId  Int?      @map("github_issue_id")
    status         String    @default("pending") @map("status")
    createdAt      DateTime  @default(now()) @map("created_at")
    updatedAt      DateTime  @default(now()) @map("updated_at")
    project        Project   @relation(fields: [projectId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}